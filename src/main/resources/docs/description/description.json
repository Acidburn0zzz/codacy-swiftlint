[
  {
    "patternId": "attributes",
    "title": "Attributes",
    "timeToFix": 5,
    "description": "Attributes should be on their own lines in functions and types, but on the same line as variables and imports."
  },
  {
    "patternId": "class_delegate_protocol",
    "title": "Class Delegate Protocol",
    "timeToFix": 5,
    "description": "Delegate protocols should be class-only so they can be weakly referenced."
  },
  {
    "patternId": "closing_brace",
    "title": "Closing Brace Spacing",
    "timeToFix": 5,
    "description": "Closing brace with closing parenthesis should not have any whitespaces in the middle."
  },
  {
    "patternId": "closure_end_indentation",
    "title": "Closure End Indentation",
    "timeToFix": 5,
    "description": "Closure end should have the same indentation as the line that started it."
  },
  {
    "patternId": "closure_parameter_position",
    "title": "Closure Parameter Position",
    "timeToFix": 5,
    "description": "Closure parameters should be on the same line as opening brace."
  },
  {
    "patternId": "closure_spacing",
    "title": "Closure Spacing",
    "timeToFix": 5,
    "description": "Closure expressions should have a single space inside each brace."
  },
  {
    "patternId": "colon",
    "title": "Colon",
    "timeToFix": 5,
    "description": "Colons should be next to the identifier when specifying a type and next to the key in dictionary literals."
  },
  {
    "patternId": "comma",
    "title": "Comma Spacing",
    "timeToFix": 5,
    "description": "There should be no space before and one after any comma."
  },
  {
    "patternId": "compiler_protocol_init",
    "title": "Compiler Protocol Init",
    "timeToFix": 5,
    "description": "The initializers declared in compiler protocols such as ExpressibleByArrayLiteral shouldn't be called directly."
  },
  {
    "patternId": "conditional_returns_on_newline",
    "title": "Conditional Returns on Newline",
    "timeToFix": 5,
    "description": "Conditional statements should always return on the next line"
  },
  {
    "patternId": "control_statement",
    "title": "Control Statement",
    "timeToFix": 5,
    "description": "if,for,while,do statements shouldn't wrap their conditionals in parentheses."
  },
  {
    "patternId": "custom_rules",
    "title": "Custom Rules",
    "timeToFix": 5,
    "description": "Create custom rules by providing a regex string. Optionally specify what syntax kinds to match against, the severity level, and what message to display."
  },
  {
    "patternId": "cyclomatic_complexity",
    "title": "Cyclomatic Complexity",
    "timeToFix": 5,
    "description": "Complexity of function bodies should be limited."
  },
  {
    "patternId": "discarded_notification_center_observer",
    "title": "Discarded Notification Center Observer",
    "timeToFix": 5,
    "description": "When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later."
  },
  {
    "patternId": "dynamic_inline",
    "title": "Dynamic Inline",
    "timeToFix": 5,
    "description": "avoid using 'dynamic' and '@inline(__always)' together."
  },
  {
    "patternId": "empty_count",
    "title": "Empty Count",
    "timeToFix": 5,
    "description": "Prefer checking isEmpty over comparing count to zero."
  },
  {
    "patternId": "empty_enum_arguments",
    "title": "Empty Enum Arguments",
    "timeToFix": 5,
    "description": "Arguments can be omitted when matching enums with associated types if they are not used."
  },
  {
    "patternId": "empty_parameters",
    "title": "Empty Parameters",
    "timeToFix": 5,
    "description": "Prefer () ->  over Void -> ."
  },
  {
    "patternId": "empty_parentheses_with_trailing_closure",
    "title": "Empty Parentheses with Trailing Closure",
    "timeToFix": 5,
    "description": "When using trailing closures, empty parentheses should be avoided after the method call."
  },
  {
    "patternId": "explicit_init",
    "title": "Explicit Init",
    "timeToFix": 5,
    "description": "Explicitly calling .init() should be avoided."
  },
  {
    "patternId": "explicit_top_level_acl",
    "title": "Explicit Top Level ACL",
    "timeToFix": 5,
    "description": "Top-level declarations should specify Access Control Level keywords explicitly."
  },
  {
    "patternId": "explicit_type_interface",
    "title": "Explicit Type Interface",
    "timeToFix": 5,
    "description": "Properties should have a type interface"
  },
  {
    "patternId": "extension_access_modifier",
    "title": "Extension Access Modifier",
    "timeToFix": 5,
    "description": "Prefer to use extension access modifiers"
  },
  {
    "patternId": "fatal_error_message",
    "title": "Fatal Error Message",
    "timeToFix": 5,
    "description": "A fatalError call should have a message."
  },
  {
    "patternId": "file_header",
    "title": "File Header",
    "timeToFix": 5,
    "description": "Files should have consistent header comments."
  },
  {
    "patternId": "file_length",
    "title": "File Line Length",
    "timeToFix": 5,
    "description": "Files should not span too many lines."
  },
  {
    "patternId": "first_where",
    "title": "First Where",
    "timeToFix": 5,
    "description": "Prefer using .first(where:) over .filter { }.first in collections."
  },
  {
    "patternId": "for_where",
    "title": "For Where",
    "timeToFix": 5,
    "description": "where clauses are preferred over a single if inside a for."
  },
  {
    "patternId": "force_cast",
    "title": "Force Cast",
    "timeToFix": 5,
    "description": "Force casts should be avoided."
  },
  {
    "patternId": "force_try",
    "title": "Force Try",
    "timeToFix": 5,
    "description": "Force tries should be avoided."
  },
  {
    "patternId": "force_unwrapping",
    "title": "Force Unwrapping",
    "timeToFix": 5,
    "description": "Force unwrapping should be avoided."
  },
  {
    "patternId": "function_body_length",
    "title": "Function Body Length",
    "timeToFix": 5,
    "description": "Functions bodies should not span too many lines."
  },
  {
    "patternId": "function_parameter_count",
    "title": "Function Parameter Count",
    "timeToFix": 5,
    "description": "Number of function parameters should be low."
  },
  {
    "patternId": "generic_type_name",
    "title": "Generic Type Name",
    "timeToFix": 5,
    "description": "Generic type name should only contain alphanumeric characters, start with an uppercase character and span between 1 and 20 characters in length."
  },
  {
    "patternId": "identifier_name",
    "title": "Identifier Name",
    "timeToFix": 5,
    "description": "Identifier names should only contain alphanumeric characters and start with a lowercase character or should only contain capital letters. In an exception to the above, variable names may start with a capital letter when they are declared static and immutable. Variable names should not be too long or too short."
  },
  {
    "patternId": "implicit_getter",
    "title": "Implicit Getter",
    "timeToFix": 5,
    "description": "Computed read-only properties should avoid using the get keyword."
  },
  {
    "patternId": "implicit_return",
    "title": "Implicit Return",
    "timeToFix": 5,
    "description": "Prefer implicit returns in closures."
  },
  {
    "patternId": "implicitly_unwrapped_optional",
    "title": "Implicitly Unwrapped Optional",
    "timeToFix": 5,
    "description": "Implicitly unwrapped optionals should be avoided when possible."
  },
  {
    "patternId": "large_tuple",
    "title": "Large Tuple",
    "timeToFix": 5,
    "description": "Tuples shouldn't have too many members. Create a custom type instead."
  },
  {
    "patternId": "leading_whitespace",
    "title": "Leading Whitespace",
    "timeToFix": 5,
    "description": "Files should not contain leading whitespace."
  },
  {
    "patternId": "legacy_cggeometry_functions",
    "title": "Legacy CGGeometry Functions",
    "timeToFix": 5,
    "description": "Struct extension properties and methods are preferred over legacy functions"
  },
  {
    "patternId": "legacy_constant",
    "title": "Legacy Constant",
    "timeToFix": 5,
    "description": "Struct-scoped constants are preferred over legacy global constants."
  },
  {
    "patternId": "legacy_constructor",
    "title": "Legacy Constructor",
    "timeToFix": 5,
    "description": "Swift constructors are preferred over legacy convenience functions."
  },
  {
    "patternId": "legacy_nsgeometry_functions",
    "title": "Legacy NSGeometry Functions",
    "timeToFix": 5,
    "description": "Struct extension properties and methods are preferred over legacy functions"
  },
  {
    "patternId": "line_length",
    "title": "Line Length",
    "timeToFix": 5,
    "description": "Lines should not span too many characters."
  },
  {
    "patternId": "mark",
    "title": "Mark",
    "timeToFix": 5,
    "description": "MARK comment should be in valid format. e.g. '// MARK: ...' or '// MARK: - ...'"
  },
  {
    "patternId": "multiline_parameters",
    "title": "Multiline Parameters",
    "timeToFix": 5,
    "description": "Functions and methods parameters should be either on the same line, or one per line."
  },
  {
    "patternId": "nesting",
    "title": "Nesting",
    "timeToFix": 5,
    "description": "Types should be nested at most 1 level deep, and statements should be nested at most 5 levels deep."
  },
  {
    "patternId": "nimble_operator",
    "title": "Nimble Operator",
    "timeToFix": 5,
    "description": "Prefer Nimble operator overloads over free matcher functions."
  },
  {
    "patternId": "no_extension_access_modifier",
    "title": "No Extension Access Modifier",
    "timeToFix": 5,
    "description": "Prefer not to use extension access modifiers"
  },
  {
    "patternId": "notification_center_detachment",
    "title": "Notification Center Detachment",
    "timeToFix": 5,
    "description": "An object should only remove itself as an observer in deinit."
  },
  {
    "patternId": "number_separator",
    "title": "Number Separator",
    "timeToFix": 5,
    "description": "Underscores should be used as thousand separator in large decimal numbers."
  },
  {
    "patternId": "object_literal",
    "title": "Object Literal",
    "timeToFix": 5,
    "description": "Prefer object literals over image and color inits."
  },
  {
    "patternId": "opening_brace",
    "title": "Opening Brace Spacing",
    "timeToFix": 5,
    "description": "Opening braces should be preceded by a single space and on the same line as the declaration."
  },
  {
    "patternId": "operator_usage_whitespace",
    "title": "Operator Usage Whitespace",
    "timeToFix": 5,
    "description": "Operators should be surrounded by a single whitespace when they are being used."
  },
  {
    "patternId": "operator_whitespace",
    "title": "Operator Function Whitespace",
    "timeToFix": 5,
    "description": "Operators should be surrounded by a single whitespace when defining them."
  },
  {
    "patternId": "overridden_super_call",
    "title": "Overridden methods call super",
    "timeToFix": 5,
    "description": "Some overridden methods should always call super"
  },
  {
    "patternId": "private_outlet",
    "title": "Private Outlets",
    "timeToFix": 5,
    "description": "IBOutlets should be private to avoid leaking UIKit to higher layers."
  },
  {
    "patternId": "private_unit_test",
    "title": "Private Unit Test",
    "timeToFix": 5,
    "description": "Unit tests marked private are silently skipped."
  },
  {
    "patternId": "prohibited_super_call",
    "title": "Prohibited calls to super",
    "timeToFix": 5,
    "description": "Some methods should not call super"
  },
  {
    "patternId": "protocol_property_accessors_order",
    "title": "Protocol Property Accessors Order",
    "timeToFix": 5,
    "description": "When declaring properties in protocols, the order of accessors should be get set."
  },
  {
    "patternId": "redundant_discardable_let",
    "title": "Redundant Discardable Let",
    "timeToFix": 5,
    "description": "Prefer _ = foo() over let _ = foo() when discarding a result from a function."
  },
  {
    "patternId": "redundant_nil_coalescing",
    "title": "Redundant Nil Coalescing",
    "timeToFix": 5,
    "description": "nil coalescing operator is only evaluated if the lhs is nil, coalescing operator with nil as rhs is redundant"
  },
  {
    "patternId": "redundant_optional_initialization",
    "title": "Redundant Optional Initialization",
    "timeToFix": 5,
    "description": "Initializing an optional variable with nil is redundant."
  },
  {
    "patternId": "redundant_string_enum_value",
    "title": "Redundant String Enum Value",
    "timeToFix": 5,
    "description": "String enum values can be omitted when they are equal to the enumcase name."
  },
  {
    "patternId": "redundant_void_return",
    "title": "Redundant Void Return",
    "timeToFix": 5,
    "description": "Returning Void in a function declaration is redundant."
  },
  {
    "patternId": "return_arrow_whitespace",
    "title": "Returning Whitespace",
    "timeToFix": 5,
    "description": "Return arrow and return type should be separated by a single space or on a separate line."
  },
  {
    "patternId": "shorthand_operator",
    "title": "Shorthand Operator",
    "timeToFix": 5,
    "description": "Prefer shorthand operators (+=, -=, *=, /=) over doing the operation and assigning."
  },
  {
    "patternId": "sorted_imports",
    "title": "Sorted Imports",
    "timeToFix": 5,
    "description": "Imports should be sorted."
  },
  {
    "patternId": "statement_position",
    "title": "Statement Position",
    "timeToFix": 5,
    "description": "Else and catch should be on the same line, one space after the previous declaration."
  },
  {
    "patternId": "switch_case_on_newline",
    "title": "Switch Case on Newline",
    "timeToFix": 5,
    "description": "Cases inside a switch should always be on a newline"
  },
  {
    "patternId": "syntactic_sugar",
    "title": "Syntactic Sugar",
    "timeToFix": 5,
    "description": "Shorthand syntactic sugar should be used, i.e. [Int] instead of Array<Int>"
  },
  {
    "patternId": "todo",
    "title": "Todo",
    "timeToFix": 5,
    "description": "TODOs and FIXMEs should be avoided."
  },
  {
    "patternId": "trailing_comma",
    "title": "Trailing Comma",
    "timeToFix": 5,
    "description": "Trailing commas in arrays and dictionaries should be avoided/enforced."
  },
  {
    "patternId": "trailing_newline",
    "title": "Trailing Newline",
    "timeToFix": 5,
    "description": "Files should have a single trailing newline."
  },
  {
    "patternId": "trailing_semicolon",
    "title": "Trailing Semicolon",
    "timeToFix": 5,
    "description": "Lines should not have trailing semicolons."
  },
  {
    "patternId": "trailing_whitespace",
    "title": "Trailing Whitespace",
    "timeToFix": 5,
    "description": "Lines should not have trailing whitespace."
  },
  {
    "patternId": "type_body_length",
    "title": "Type Body Length",
    "timeToFix": 5,
    "description": "Type bodies should not span too many lines."
  },
  {
    "patternId": "type_name",
    "title": "Type Name",
    "timeToFix": 5,
    "description": "Type name should only contain alphanumeric characters, start with an uppercase character and span between 3 and 40 characters in length."
  },
  {
    "patternId": "unused_closure_parameter",
    "title": "Unused Closure Parameter",
    "timeToFix": 5,
    "description": "Unused parameter in a closure should be replaced with _."
  },
  {
    "patternId": "unused_enumerated",
    "title": "Unused Enumerated",
    "timeToFix": 5,
    "description": "When the index or the item is not used, .enumerated() can be removed."
  },
  {
    "patternId": "unused_optional_binding",
    "title": "Unused Optional Binding",
    "timeToFix": 5,
    "description": "Prefer != nil over let _ ="
  },
  {
    "patternId": "valid_ibinspectable",
    "title": "Valid IBInspectable",
    "timeToFix": 5,
    "description": "@IBInspectable should be applied to variables only, have its type explicit and be of a supported type"
  },
  {
    "patternId": "vertical_parameter_alignment",
    "title": "Vertical Parameter Alignment",
    "timeToFix": 5,
    "description": "Function parameters should be aligned vertically if they're in multiple lines in a declaration."
  },
  {
    "patternId": "vertical_parameter_alignment_on_call",
    "title": "Vertical Parameter Alignment On Call",
    "timeToFix": 5,
    "description": "Function parameters should be aligned vertically if they're in multiple lines in a method call."
  },
  {
    "patternId": "vertical_whitespace",
    "title": "Vertical Whitespace",
    "timeToFix": 5,
    "description": "Limit vertical whitespace to a single empty line."
  },
  {
    "patternId": "void_return",
    "title": "Void Return",
    "timeToFix": 5,
    "description": "Prefer -> Void over -> ()."
  },
  {
    "patternId": "weak_delegate",
    "title": "Weak Delegate",
    "timeToFix": 5,
    "description": "Delegates should be weak to avoid reference cycles."
  }
]
